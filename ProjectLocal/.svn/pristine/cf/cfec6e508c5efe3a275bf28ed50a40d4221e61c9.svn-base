package matchState.entities;



import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import matchState.entities.Interfaces.GoalKeeperLine;
import ObserverSystem.Observable;
import ObserverSystem.Observer;
import ObserverSystem.event.Collision;
import ObserverSystem.event.Event;



public class Player implements Runnable, Observer, Observable{

	private Event newEvent;
	Map<Class, List<Observer>> eventMap = new HashMap<Class, List<Observer>>();
	public String name;
	private Team team;
	CoOrdinates position;
	private Line line;
	private double minKickSpeed;
	private double maxKickSpeed;
	private BufferedImage playerImage = null;
	private Ball ball;
	
	public void setPosition(double x, double y){
		position.setX(x);
		position.setY(y);
	}
	

	public Player(String name,CoOrdinates position ,Line line, Team team)
	{
		this.name = name;
		this.position = new CoOrdinates(position.x,position.y);
		this.line = line;
		this.minKickSpeed =(int)Math.random()*40+1;
		this.maxKickSpeed = (int)Math.random()*40+50;
		this.team = team;
		this.ball = Ball.getInstance();
	}


	@Override
	public void run() {
		//List<Direction> allDirs = Arrays.asList(Direction.values());
		// TODO Auto-generated method stub
		if((ball.position.x <= this.position.x + 10) && (ball.position.x >= this.position.x-10) && (ball.position.y <= this.position.y + 10) && (ball.position.y >= this.position.y-10)){
			System.out.println("hahahha!!");
			newEvent = new Collision(this);
			this.notifyAllObservers();
		}
	}



	@Override
	public void handleEvent(Event event) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void startObserving(Observable observable) {
	//	observable.addObserver(this, DirectionChangeEvent.class);
		//observable.addObserver(this, SpeedChangeEvent.class);
	}


	@Override
	public void notifyAllObservers() {
		// TODO Auto-generated method stub
		List<Observer> list = eventMap.get(newEvent.getClass());
		if(list != null){
			for(Observer observer : list){
				observer.handleEvent(newEvent);
			}
		}
	}


	@Override
	//public void addObserver(Observer observer, Class<?> eventClass) {
		// TODO Auto-generated method stub
		public void addObserver(Observer observer, Class eventClass) {
			List<Observer> list = eventMap.get(eventClass);
			if(list == null){
				list = new ArrayList<Observer>();
				eventMap.put(eventClass, list);
			}
			list.add(observer);
		}
		
	//}
	
	public void kickBall(Ball ball) {
		CoOrdinates p =null;
		p = searchTeamMate();
		ball.deflect(p);
	}
	
	public CoOrdinates searchTeamMate(){
		return position;
	/*	CoOrdinates p = null;
		Random random = new Random();

		if(this.line instanceof GoalKeeperLine){
			p = passToDefender();
		}
		else if(this instanceof Defender){
			p = passToMidFielder();
		}
		else if(this instanceof MidFielder){
			if(random.nextInt(2)==0){
				p = passToAttacker();
			}
			else
				p = shootGoal();
		}
		else if(this instanceof Attacker){

			p = goal();

		}
		
		return p;*/
	}
	
	

	
	
}
